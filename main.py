# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ilkdeneme.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import cv2
import numpy
import numpy as np
import matplotlib as plt
import serial
import pyrealsense2 as rs
from PyQt5 import QtWidgets
from PyQt5.QtCore import pyqtSignal, QObject
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QVBoxLayout

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from a import Ui_MainWindow
from cam import camera_view
import threading
from Ters_Kinematik import calculate_ik



x_value = None
y_value = None
z_value = None

ser = serial.Serial(
    port='COM10',
    baudrate=115200,
    timeout=5
)

class frame_update(QObject):
    valueChanged = pyqtSignal(numpy.ndarray)  # Değer değiştiğinde yayılan sinyal

    def __init__(self):
        super().__init__()
        self._value = 0

    def getValue(self):
        return self._value

    def setValue(self, value):
        self._value = value
        self.valueChanged.emit(self._value)

class ui_launcher:
    def __init__(self):
        # DH parametreleri: alpha, a, d, theta
        self.DH_parameters = [
            [0, 0, 0, 0],
            [-90, 0, 0, -90],
            [0, 246, 0, 0],
            [-90, 28, 200, 0],
            [90, 0, 0, 0],
            [-90, 0, 100, 0]
        ]

        # Eklemler için limitler (derece cinsinden)
        self.joint_limits = np.array([
            [-140, 140],
            [-60, 130],
            [-135, 70],
            [-180, 180],
            [-45, 90],
            [-180, 180]
        ])

        self.new_frame = frame_update()
        self.cam = camera_view(ui_given=self)
        self.cam_thread = None
        self.gripper_on = False
        self.create_ui()
        #self.slider_ui()
        self.fig = Figure()
        self.canvas = FigureCanvas(self.fig)
        layout = QVBoxLayout(self.ui.widget_graphic)
        layout.addWidget(self.canvas)

        self.ax = self.fig.add_subplot(111, projection='3d')

        # Slider ve TextBox nesnelerini bağlama
        self.sliders = [self.ui.slider_joint1, self.ui.slider_joint2, self.ui.slider_joint3,
                        self.ui.slider_joint4, self.ui.slider_joint5, self.ui.slider_joint6]

        self.textboxes = [self.ui.textbox_joint1, self.ui.textbox_joint2, self.ui.textbox_joint3,
                          self.ui.textbox_joint4, self.ui.textbox_joint5, self.ui.textbox_joint6]

        for slider, textbox in zip(self.sliders, self.textboxes):
            slider.valueChanged.connect(self.update_plot)
            textbox.editingFinished.connect(self.update_from_textbox)

        # İlk grafiği oluşturma
        self.update_plot()
        self.show_ui()

    def update_plot(self):

        thetas = []
        for textbox in self.textboxes:
            value = textbox.text()
            if value.strip() == "":  # Boş mu kontrol et
                value = "0.0"
            thetas.append(float(value))
        points, T_k = self.forward_kinematics(thetas)

        self.ax.cla()
        self.ax.plot(points[:, 0], points[:, 1], points[:, 2], 'bo-', linewidth=2)
        self.ax.set_xlim(-500, 500)
        self.ax.set_ylim(-500, 500)
        self.ax.set_zlim(-100, 500)
        self.ax.set_xlabel('X')
        self.ax.set_ylabel('Y')
        self.ax.set_zlabel('Z')
        self.ax.set_title("3D Robot")

        self.canvas.draw_idle()

        # Uç işlevcinin konumunu güncelle
        self.ui.label_position.setText(f"X={T_k[0, 3]:.2f}\nY={T_k[1, 3]:.2f}\nZ={T_k[2, 3]:.2f}")



    def forward_kinematics(self, thetas):
        T_k = np.eye(4)
        points = [T_k[:3, 3]]
        for i in range(len(self.DH_parameters)):
            alpha, a, d, theta_offset = self.DH_parameters[i]
            theta = thetas[i] + theta_offset
            T_current = np.array([
                [np.cos(np.radians(theta)), -np.sin(np.radians(theta)), 0, a],
                [np.sin(np.radians(theta)) * np.cos(np.radians(alpha)),
                 np.cos(np.radians(theta)) * np.cos(np.radians(alpha)), -np.sin(np.radians(alpha)),
                 -np.sin(np.radians(alpha)) * d],
                [np.sin(np.radians(theta)) * np.sin(np.radians(alpha)),
                 np.cos(np.radians(theta)) * np.sin(np.radians(alpha)), np.cos(np.radians(alpha)),
                 np.cos(np.radians(alpha)) * d],
                [0, 0, 0, 1]
            ])
            T_k = T_k @ T_current
            points.append(T_k[:3, 3])
        return np.array(points), T_k
    def update_from_textbox(self):
        for i, textbox in enumerate(self.textboxes):
            try:
                new_val = float(textbox.text())
                if self.joint_limits[i, 0] <= new_val <= self.joint_limits[i, 1]:
                    self.sliders[i].setValue(int(new_val))
            except ValueError:
                pass  # Geçersiz girdi olduğunda, değeri yok say


    def create_ui(self):
        self.app = QtWidgets.QApplication(sys.argv)
        self.MainWindow = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.MainWindow)
        self.ui.pushButton_kamerakapat.clicked.connect(self.stop_camera)
        self.ui.pushButton_kameraac.clicked.connect(self.start_camera_thread)
        self.ui.pushButton_koordinat.clicked.connect(self.on_button_click)
        self.new_frame.valueChanged.connect(self.update_frame)
        self.ui.pushButton_x_plus.clicked.connect(self.move_widget_x_plus)
        self.ui.pushButton_x_minus.clicked.connect(self.move_widget_x_minus)
        self.ui.pushButton_y_plus.clicked.connect(self.move_widget_y_plus)
        self.ui.pushButton_y_minus.clicked.connect(self.move_widget_y_minus)
        self.ui.pushButton_z_plus.clicked.connect(self.move_widget_z_plus)
        self.ui.pushButton_z_minus.clicked.connect(self.move_widget_z_minus)
        self.ui.pushButton_ilerle.clicked.connect(self.slider_hareket)
        # Toggle fonksiyonunu butonun clicked sinyaline bağlama
        self.ui.pushButton_gripperonoff.clicked.connect(self.toggle_gripper)
        self.ui.pushButton_baslangic.clicked.connect(self.baslangic_konum)
        self.ui.pushButton_foto.clicked.connect(self.foto_konum)
        self.ui.pushButton_yaklas.clicked.connect(self.yaklas_konum)
        self.ui.pushButton_sepet.clicked.connect(self.sepet_konum)

    def baslangic_konum(self):
        self.ui.textbox_joint1.setText("0")
        self.ui.textbox_joint2.setText("0")
        self.ui.textbox_joint3.setText("0")
        self.ui.textbox_joint4.setText("0")
        self.ui.textbox_joint5.setText("0")
        self.ui.textbox_joint6.setText("0")

    def foto_konum(self):
        self.ui.textbox_joint1.setText("0")
        self.ui.textbox_joint2.setText("-30")
        self.ui.textbox_joint3.setText("38")
        self.ui.textbox_joint4.setText("0")
        self.ui.textbox_joint5.setText("0")
        self.ui.textbox_joint6.setText("0")

    def yaklas_konum(self):
        self.ui.textbox_joint1.setText("0")
        self.ui.textbox_joint2.setText("28")
        self.ui.textbox_joint3.setText("-20")
        self.ui.textbox_joint4.setText("0")
        self.ui.textbox_joint5.setText("0")
        self.ui.textbox_joint6.setText("0")

    def sepet_konum(self):
        self.ui.textbox_joint1.setText("-60")
        self.ui.textbox_joint2.setText("-25")
        self.ui.textbox_joint3.setText("35")
        self.ui.textbox_joint4.setText("0")
        self.ui.textbox_joint5.setText("45")
        self.ui.textbox_joint6.setText("0")

    def slider_ui(self):
        self.ui.slider_joint1.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint1, label=self.ui.textbox_joint1))
        self.ui.slider_joint2.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint2, label=self.ui.textbox_joint2))
        self.ui.slider_joint3.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint3, label=self.ui.textbox_joint3))
        self.ui.slider_joint4.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint4, label=self.ui.textbox_joint4))
        self.ui.slider_joint5.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint5, label=self.ui.textbox_joint5))
        self.ui.slider_joint6.valueChanged.connect(
            lambda: self.slider_value_update(slider=self.ui.slider_joint6, label=self.ui.textbox_joint6))

        self.show_ui()

    def slider_value_update(self, slider, label):
        label.setText(str(slider.value()))

    def label_value_update(self, label, slider):
        slider.value(str(label.setText))

    def slider_hareket(self):
        values = []
        for textbox in self.textboxes:
            text = textbox.text()
            try:
                # Önce ondalıklı sayıya dönüştür, ardından tam sayıya çevir ve 180 ekle
                value = int(float(text)) + 180

                # 255'ten büyükse işlemi gerçekleştir
                if value > 255:
                    # Modulo 255 ve farkı hesapla
                    mod_value = value % 255
                    values.extend([mod_value, 255])
                else:
                    # 255'ten küçükse sadece değeri ekle
                    values.extend([0, value])

            except ValueError:
                # Eğer veri sayıya dönüştürülemezse bir hata mesajı yazdır
                print(f"Geçersiz giriş: '{text}' sayıya dönüştürülemedi.")

        # values listesini string'e çevirerek virgülleri kaldır
        values_str = ''.join(str(v) for v in values) + "0"
        byte_array = bytearray(values)

        print(f"Değer: {byte_array}")

        # UART HABERLEŞMESİ EKLENECEK

        ser.write(byte_array)


    def update_frame(self, frame):
        height, width, channel = frame.shape
        step = channel * width
        qImg = QImage(frame.data, width, height, step, QImage.Format_RGB888)
        self.ui.label_14.setPixmap(QPixmap.fromImage(qImg))

    def start_camera_thread(self):
        if self.cam.disable:
            self.cam.disable = False
            self.cam.cap = cv2.VideoCapture(2)
            self.cam_thread = threading.Thread(target=self.cam.read_cam)
            self.cam_thread.daemon = True
            self.cam_thread.start()
            print("Camera Started")

    def stop_camera(self):
        if not self.cam.disable:
            self.cam.disable = True
            print("Camera Stopped")

    def show_ui(self):
        self.MainWindow.show()
        sys.exit(self.app.exec_())



    def toggle_gripper(self):
        if self.gripper_on:
            self.ui.pushButton_gripperonoff.setText("Makas Aç")
            self.ui.pushButton_gripperonoff.setStyleSheet("background-color: green; color: white;")
            self.gripper_on = False
            grip_val = 0
            print('Gripper Kapalı') # UART HABERLEŞMESİ EKLENECEK
            grip_send = f"999999999999{grip_val}"
            print(grip_send)
            ser.write(grip_send.encode())

        else:
            self.ui.pushButton_gripperonoff.setText("Makas Kapat")
            self.ui.pushButton_gripperonoff.setStyleSheet("background-color: red; color: white;")
            self.gripper_on = True
            grip_val = 1
            print('Gripper Açık') # UART HABERLEŞMESİ EKLENECEK
            grip_send = f"999999999999{grip_val}"
            print(grip_send)
            ser.write(grip_send.encode())

    def on_button_click(self):
        try:
            global x_value
            global y_value
            global z_value
            # lineEdit widget'ından girilen metni alın
            x_value = int(self.ui.lineEdit_7.text())
            # Girilen metni konsola yazdırır
            print("X = ", x_value)
            y_value = int(self.ui.lineEdit_8.text())
            print("Y = ", y_value)
            z_value = int(self.ui.lineEdit_9.text())
            print("Z = ", z_value)

            joint_angles = calculate_ik(x_value, y_value, z_value)
            first_element = joint_angles.split(", ")[0]
            self.sliders[0].setValue(int(float(first_element)))
            self.textboxes[0].setText(first_element)
            second_element = joint_angles.split(", ")[1]
            self.sliders[1].setValue(int(float(second_element)))
            self.textboxes[1].setText(second_element)
            third_element = joint_angles.split(", ")[2]
            self.sliders[2].setValue(int(float(third_element)))
            self.textboxes[2].setText(third_element)
            fourth_element = joint_angles.split(", ")[3]
            self.sliders[3].setValue(int(float(fourth_element)))
            self.textboxes[3].setText(fourth_element)
            fifth_element = joint_angles.split(", ")[4]
            self.sliders[4].setValue(int(float(fifth_element)))
            self.textboxes[4].setText(fifth_element)
            sixth_element = joint_angles.split(", ")[5]
            self.sliders[5].setValue(int(float(sixth_element)))
            self.textboxes[5].setText(sixth_element)


        except Exception as e:
            print(f"Hata: Koordinatlar - {e}")




    def move_widget_x_plus(self):
        try:
            # Seçili çarpanı al
            step = int(self.ui.comboBox_carpan_2.currentText())

            current_pos = int(self.ui.lineEdit_7.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos + step
            # Adım sayısını yazdır
            print(f"x yönünde +{step} adım atıldı. Yeni pozisyonu : {new_pos}")
            self.ui.lineEdit_7.setText(str(new_pos))


        except Exception as e :
            print(f'Hata: Arttırma - {e}')

    def move_widget_x_minus(self):
        try:
            # Seçili çarpanı al
            step_x = int(self.ui.comboBox_carpan_2.currentText())

            current_pos = int(self.ui.lineEdit_7.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos - step_x

            # Adım sayısını yazdır
            print(f"x yönünde -{step_x} adım atıldı. Yeni pozisyon : {new_pos}")
            self.ui.lineEdit_7.setText(str(new_pos))

        except Exception as e:
            print(f'Hata: Eksiltme - {e}')

    def move_widget_y_plus(self):
        try:
            # Seçili çarpanı al
            step = int(self.ui.comboBox_carpan_2.currentText())

            # Yeni pozisyonu hesapla
            current_pos = int(self.ui.lineEdit_8.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos + step

            # Adım sayısını yazdır
            print(f"y yönünde +{step} adım atıldı. Yeni pozisyonu : {new_pos}")
            self.ui.lineEdit_8.setText(str(new_pos))


        except Exception as e :
            print(f'Hata: Arttırma - {e}')

    def move_widget_y_minus(self):
        try:
            # Seçili çarpanı al
            step_y = int(self.ui.comboBox_carpan_2.currentText())

            current_pos = int(self.ui.lineEdit_8.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos - step_y

            # Adım sayısını yazdır
            print(f"y yönünde -{step_y} adım atıldı. Yeni pozisyon : {new_pos}")
            self.ui.lineEdit_8.setText(str(new_pos))

        except Exception as e:
            print(f'Hata: Eksiltme - {e}')

    def move_widget_z_plus(self):
        try:
            # Seçili çarpanı al
            step = int(self.ui.comboBox_carpan_2.currentText())

            current_pos = int(self.ui.lineEdit_9.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos + step

            # Adım sayısını yazdır
            print(f"z yönünde +{step} adım atıldı. Yeni pozisyonu : {new_pos}")
            self.ui.lineEdit_9.setText(str(new_pos))


        except Exception as e :
            print(f'Hata: Arttırma - {e}')


    def move_widget_z_minus(self):
        try:
            # Seçili çarpanı al
            step_z = int(self.ui.comboBox_carpan_2.currentText())

            # Mevcut konumu al
            current_pos = int(self.ui.lineEdit_9.text())

            # Yeni pozisyonu hesapla
            new_pos = current_pos - step_z


            # Adım sayısını yazdır
            print(f"z yönünde -{step_z} adım atıldı. Yeni pozisyon : {new_pos}")
            self.ui.lineEdit_9.setText(str(new_pos))

        except Exception as e:
            print(f'Hata: Eksiltme - {e}')
























if __name__ == "__main__":
    try:
        ui_l = ui_launcher()
    finally:
        ser.close()
        print("Finish")





